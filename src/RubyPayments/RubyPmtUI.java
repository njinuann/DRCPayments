/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RubyPayments;

import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author NJINU
 */
public class RubyPmtUI extends javax.swing.JFrame {

    /**
     * Creates new form RubyPmtUI
     */
    JDialog chargesDialog = null;
    TXUtility txutil = new TXUtility();

    public RubyPmtUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        displayScroller = new javax.swing.JScrollPane();
        displayPane = ExtPayMain.displayArea;
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSplitPane2 = new javax.swing.JSplitPane();
        billerTreeScroller = new javax.swing.JScrollPane();
        extPayTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        txnTableScroller = new javax.swing.JScrollPane();
        txnDispTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        shutdownButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        meterToolBar = new javax.swing.JToolBar();
        status = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        bridgeMenu = new javax.swing.JMenu();
        shutdownMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        shutdownMenuItem1 = new javax.swing.JMenuItem();
        mobileMenu = new javax.swing.JMenu();
        chargesMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        chargesMenuItem2 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        chargesMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        activateOffline = new javax.swing.JCheckBoxMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ruby Payments ~ Neptune Software");
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon.png")));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 60));

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setDividerSize(9);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        displayPane.setEditable(false);
        displayPane.setBackground(new java.awt.Color(204, 255, 204));
        displayScroller.setViewportView(displayPane);
        displayPane.getDocument().addDocumentListener(new TextLineLimit(BRController.maxLineCount));

        jSplitPane1.setRightComponent(displayScroller);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jSplitPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setDividerSize(8);

        extPayTree.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("TRANSACTIONS");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("School Fees Payment");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("E-Tax Payment");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("TV Payment");
        treeNode1.add(treeNode2);
        extPayTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        extPayTree.setCellRenderer(new RubyPayments.TRenderer());
        extPayTree.setShowsRootHandles(true);
        extPayTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                extPayTreeValueChanged(evt);
            }
        });
        billerTreeScroller.setViewportView(extPayTree);

        jSplitPane2.setLeftComponent(billerTreeScroller);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Transactions"));

        txnTableScroller.setBorder(null);

        txnDispTable.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Table.gridColor")));
        txnDispTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        txnTableScroller.setViewportView(txnDispTable);
        txnDispTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txnTableScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel1);

        jSplitPane1.setTopComponent(jSplitPane2);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        shutdownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit64.png"))); // NOI18N
        shutdownButton.setToolTipText("Shutdown");
        shutdownButton.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        shutdownButton.setFocusable(false);
        shutdownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shutdownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(shutdownButton);

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help64.png"))); // NOI18N
        aboutButton.setToolTipText("About");
        aboutButton.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 0), javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray)));
        aboutButton.setFocusable(false);
        aboutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        aboutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(aboutButton);

        meterToolBar.setBorder(null);
        meterToolBar.setFloatable(false);
        meterToolBar.setRollover(true);
        meterToolBar.setToolTipText("");
        meterToolBar.setOpaque(false);

        setIsoMeters();

        status.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        status.setText("Gateway Online");

        bridgeMenu.setMnemonic('B');
        bridgeMenu.setText("Bridge");

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.ALT_MASK));
        shutdownMenuItem.setText("Start Services");
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        bridgeMenu.add(shutdownMenuItem);
        bridgeMenu.add(jSeparator5);

        shutdownMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        shutdownMenuItem1.setText("Shutdown Bridge");
        shutdownMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownMenuItem1ActionPerformed(evt);
            }
        });
        bridgeMenu.add(shutdownMenuItem1);

        menuBar.add(bridgeMenu);

        mobileMenu.setMnemonic('M');
        mobileMenu.setText("Management");

        chargesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        chargesMenuItem.setText("Manage Accounts");
        chargesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargesMenuItemActionPerformed(evt);
            }
        });
        mobileMenu.add(chargesMenuItem);
        mobileMenu.add(jSeparator4);

        chargesMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        chargesMenuItem2.setText("Manage Tax Types");
        chargesMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargesMenuItem2ActionPerformed(evt);
            }
        });
        mobileMenu.add(chargesMenuItem2);
        mobileMenu.add(jSeparator2);

        chargesMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        chargesMenuItem1.setText("Excel Reports");
        chargesMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargesMenuItem1ActionPerformed(evt);
            }
        });
        mobileMenu.add(chargesMenuItem1);
        mobileMenu.add(jSeparator1);

        activateOffline.setText("Switch Offline");
        activateOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateOfflineActionPerformed(evt);
            }
        });
        mobileMenu.add(activateOffline);
        activateOffline.setSelected(ChannelUtil.SERVICE_OFFLINE);
        updateUI();

        menuBar.add(mobileMenu);

        aboutMenu.setMnemonic('O');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setText("About Bridge");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(meterToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(meterToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(status)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(shutdownButton::doClick);
    }//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void chargesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargesMenuItemActionPerformed
        // TODO add your handling code here:
        config.showChargesDialog();
    }//GEN-LAST:event_chargesMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(aboutButton::doClick);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void shutdownMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shutdownMenuItem1ActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        // TODO add your handling code here:
        showAboutInfo();
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownButtonActionPerformed
        // TODO add your handling code here:
        ExtPayMain.shutdown();
    }//GEN-LAST:event_shutdownButtonActionPerformed

    private void chargesMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargesMenuItem1ActionPerformed
        // TODO add your handling code here:
        repotsPanel.showReportsDialog();
    }//GEN-LAST:event_chargesMenuItem1ActionPerformed

    private void extPayTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_extPayTreeValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode extPayNode = (DefaultMutableTreeNode) extPayTree.getLastSelectedPathComponent();
        if (extPayNode != null) {
            try {
                displayValue();
            } catch (SQLException ex) {
                Logger.getLogger(RubyPmtUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_extPayTreeValueChanged

    private void chargesMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargesMenuItem2ActionPerformed
        // TODO add your handling code here:
        taxTypeConfig.showTaxDialog();
    }//GEN-LAST:event_chargesMenuItem2ActionPerformed


    private void activateOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateOfflineActionPerformed
        ChannelUtil.SERVICE_OFFLINE = activateOffline.isSelected();
        ChannelUtil.saveState(ChannelUtil.SERVICE_OFFLINE ? "Y" : "N");
        BRController.reconfigure();
        updateUI();
        JOptionPane.showMessageDialog(this, "Please restart this bridge to complete activation of "
                + (ChannelUtil.SERVICE_OFFLINE ? "offline mode" : "online mode"), "NepPayments Interface", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_activateOfflineActionPerformed

    private void updateUI() {
        status.setText("Ruby Gateway " + (ChannelUtil.SERVICE_OFFLINE ? "Offline" : "Online"));
    }

    private void displayValue() throws SQLException {
        ResultSet txnData;
        DefaultMutableTreeNode selectedExtPayNode = (DefaultMutableTreeNode) extPayTree.getLastSelectedPathComponent();
        if (selectedExtPayNode != null) {
            String selectedRec = selectedExtPayNode.getUserObject().toString();
            switch (selectedRec) {
                case "Transactions":
                    break;
                case "School Fees Payment":
                    txnData = txutil.querybillertxn();
                    //txnDispTable
                    if (txnData == null) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, " Failed to retrieve account information from database. Please check logs file for details.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    } else if (!txnData.next()) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, "No records were found in database. Please consult System Administrator.", "Database Error", JOptionPane.ERROR_MESSAGE);
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));
                    } else {
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));

                    }

                    break;
                case "E-Tax Payment":
                    txnData = txutil.queryTaxTxn();
                    if (txnData == null) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, " Failed to retrieve account information from database. Please check logs file for details.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    } else if (!txnData.next()) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, "No records were found in database. Please consult System Administrator.", "Database Error", JOptionPane.ERROR_MESSAGE);
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));
                    } else {
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));
                    }

                    break;
                case "TV Payment":
                    txnData = txutil.queryTvtxn();
                    if (txnData == null) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, " Failed to retrieve account information from database. Please check logs file for details.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    } else if (!txnData.next()) {
                        JOptionPane.showMessageDialog(ExtPayMain.uiFrame, "No records were found in database. Please consult System Administrator.", "Database Error", JOptionPane.ERROR_MESSAGE);
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));
                    } else {
                        RubyPmtUI.txnDispTable.setModel(DbUtils.resultSetToTableModel(txnData));
                    }
                    break;
                default:
                    break;
            }
        }
    }

    private void showAboutInfo() {
        JOptionPane.showMessageDialog(null,
                "<html><font face=\"Arial\" weight=\"plain\" size=\"2\">Product licensed to FINCA DRC, Kinsasha DRC"
                + "<br/>Copyright \u00A9 2016 Neptune Software Plc, 7th floor Victoria Towers,"
                + "<br/>Kilimanjaro Road, Upperhill, Nairobi Kenya. All rights reserved.</font></html>", "Ruby Bridge Payments Adaptor", JOptionPane.INFORMATION_MESSAGE);

    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RubyPmtUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RubyPmtUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RubyPmtUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RubyPmtUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RubyPmtUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBoxMenuItem activateOffline;
    private javax.swing.JScrollPane billerTreeScroller;
    private javax.swing.JMenu bridgeMenu;
    private javax.swing.JMenuItem chargesMenuItem;
    private javax.swing.JMenuItem chargesMenuItem1;
    private javax.swing.JMenuItem chargesMenuItem2;
    private javax.swing.JTextPane displayPane;
    private javax.swing.JScrollPane displayScroller;
    private javax.swing.JTree extPayTree;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    public javax.swing.JMenuBar menuBar;
    private javax.swing.JToolBar meterToolBar;
    private javax.swing.JMenu mobileMenu;
    private javax.swing.JButton shutdownButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JMenuItem shutdownMenuItem1;
    private javax.swing.JLabel status;
    private static javax.swing.JTable txnDispTable;
    private javax.swing.JScrollPane txnTableScroller;
    // End of variables declaration//GEN-END:variables
    private final TCPanel config = new TCPanel();
    private final RepotsPanel repotsPanel = new RepotsPanel();
    private final TaxTypeConfig taxTypeConfig = new TaxTypeConfig();
    private BRMeter brMeter = new BRMeter("PAYMENTS");

    public void setIsoMeters() {
        meterToolBar.removeAll();
        meterToolBar.add(getBrMeter());
        meterToolBar.addSeparator();

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(50);
                    meterToolBar.updateUI();
                } catch (Exception ex) {
                    ex = null;
                }
            }
        });
    }

    /**
     * @return the brMeter
     */
    public BRMeter getBrMeter() {
        return brMeter;
    }

    /**
     * @param brMeter the brMeter to set
     */
    public void setBrMeter(BRMeter brMeter) {
        this.brMeter = brMeter;
    }

}
