/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RubyPayments;

import java.util.StringTokenizer;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author NJINU
 */
public class TCPanel extends javax.swing.JPanel
{

    /**
     * Creates new form TCPanel
     */
    TXUtility txutil = new TXUtility();
    String Validate, BillerTc, validateTax;
    String AcctAbrv, AcctName;
    String clicked;
    JDialog chargesDialog = null;

    public TCPanel()
    {
        initComponents();
        clearFields();
        setTaxTypeCombo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        billerTreeScroller = new javax.swing.JScrollPane();
        billerTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        ACCT_NO_BILL = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ACCT_NAME = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ACCT_NO_NAME = new javax.swing.JTextField();
        abbvr = new javax.swing.JTextField();

        billerTree.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Biller Account");
        billerTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        billerTree.setCellRenderer(new RubyPayments.TRenderer());
        billerTree.setShowsRootHandles(true);
        billerTree.addContainerListener(new java.awt.event.ContainerAdapter()
        {
            public void componentRemoved(java.awt.event.ContainerEvent evt)
            {
                billerTreeComponentRemoved(evt);
            }
        });
        billerTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
        {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
            {
                billerTreeValueChanged(evt);
            }
        });
        billerTreeScroller.setViewportView(billerTree);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Biller Accounts"));

        saveButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.setPreferredSize(new java.awt.Dimension(82, 25));
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        ACCT_NO_BILL.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                ACCT_NO_BILLFocusLost(evt);
            }
        });
        ACCT_NO_BILL.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                ACCT_NO_BILLMouseClicked(evt);
            }
        });
        ACCT_NO_BILL.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                ACCT_NO_BILLKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                ACCT_NO_BILLKeyTyped(evt);
            }
        });

        jLabel2.setText("Biller account");

        ACCT_NAME.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
        ACCT_NAME.setMinimumSize(new java.awt.Dimension(4, 20));
        ACCT_NAME.setPreferredSize(new java.awt.Dimension(4, 20));
        ACCT_NAME.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                ACCT_NAMEItemStateChanged(evt);
            }
        });
        ACCT_NAME.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                ACCT_NAMEPropertyChange(evt);
            }
        });

        jLabel3.setText("Account Name");

        ACCT_NO_NAME.setEditable(false);
        ACCT_NO_NAME.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                ACCT_NO_NAMEMouseClicked(evt);
            }
        });
        ACCT_NO_NAME.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                ACCT_NO_NAMEKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                ACCT_NO_NAMEKeyTyped(evt);
            }
        });

        abbvr.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(ACCT_NO_NAME, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(abbvr, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(ACCT_NO_BILL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ACCT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ACCT_NO_BILL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ACCT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ACCT_NO_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abbvr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(billerTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(billerTreeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setTaxTypeCombo()
    {
        txutil.TaxTypeCombo().stream().forEach((item) ->
        {
            ACCT_NAME.addItem(item);
        });

    }

    public String splitItem(String bsName, int position)
    {
        //  String temp = splitbillerItem(schcombo.getSelectedItem().toString());
        String temp = bsName;
        String[] splitString = temp.split("\\~");

        for (int i = 0;i < splitString.length;i++)
        {
        }
        return splitString[position];
    }
    private void billerTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_billerTreeValueChanged

        DefaultMutableTreeNode billerNode = (DefaultMutableTreeNode) billerTree.getLastSelectedPathComponent();
        if (billerNode != null)
        {
            displayValue(billerNode.getUserObject().toString().split("~")[0].trim());
        }

    }//GEN-LAST:event_billerTreeValueChanged
    private void displayValue(String dispValue)
    {

        DefaultMutableTreeNode selectedBillerNode = (DefaultMutableTreeNode) billerTree.getLastSelectedPathComponent();
        if (selectedBillerNode != null)
        {
            String selectedBank = selectedBillerNode.getUserObject().toString();
            if (selectedBank.equals("Biller Account"))
            {
                clearFields();
                saveButton.setText("Save");
            }
            else
            {
                String AccountNo = selectedBank.substring(0, selectedBank.indexOf(" ~ "));
                System.out.println("acct_no  " + AccountNo + " " + ACCT_NO_NAME.getText());
                Object[][] bankData = txutil.querybillerAccount(dispValue);
                if (bankData == null)
                {
                    JOptionPane.showMessageDialog(ExtPayMain.uiFrame, " Failed to retrieve account information from database. Please check logs file for details.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    saveButton.setEnabled(false);
                    saveButton.setText("Save");
                    ACCT_NO_BILL.setText("");
                }
                else if (bankData.length == 0)
                {
                    JOptionPane.showMessageDialog(ExtPayMain.uiFrame, "Cannot find account information in database. Please consult System Administrator.", "Database Error", JOptionPane.ERROR_MESSAGE);
                    saveButton.setEnabled(false);
                    ACCT_NO_BILL.setText("");
                    saveButton.setText("Save");
                }
                else
                {
                    ACCT_NO_BILL.setText(dispValue);
                    saveButton.setText("Update");
                    saveButton.setEnabled(true);
                    verifyAcctNo(dispValue);
                }
            }
        }
    }

    private void verifyAcctNo(String dispValue)
    {
        ACCT_NO_BILL.setText("");
        String acctNo = dispValue;

        ACCT_NO_BILL.setText(acctNo);
        Object[][] acctData = txutil.verifyBillerAccount(acctNo);
        if (acctData == null)
        {
            JOptionPane.showMessageDialog(this, "Error verifying  account number!", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (acctData.length == 0)
        {
            JOptionPane.showMessageDialog(this, "Invalid or InActive account number!");
        }
        else
        {
            String cleanName = "";
            StringTokenizer tokenizer = new StringTokenizer(acctData[0][0].toString());
            while (tokenizer.hasMoreTokens())
            {
                cleanName += tokenizer.nextToken().trim() + " ";
            }
            ACCT_NO_BILL.setText(cleanName.trim());
            setAcctDisplayRec();

        }
    }

    private void setAcctDisplayRec()
    {
        if (!ACCT_NO_BILL.getText().isEmpty() || !ACCT_NO_BILL.getText().equals(""))
        {
            //TaxName.setText(String.valueOf(txutil.queryTaxType(Integer.parseInt(TaxId.getText()))[0][0]));
            Object[][] billerAcct = txutil.selectBlAcctFiltered(ACCT_NO_BILL.getText());

            for (Object[] record : billerAcct)
            {
                ACCT_NO_NAME.setText(String.valueOf(record[1]));
                ACCT_NAME.setSelectedItem(String.valueOf(record[1]));
                abbvr.setText(String.valueOf(record[2]));
                ACCT_NO_NAME.requestFocusInWindow();

            }
        }
    }

    public void showChargesDialog()
    {
        refreshBanksTree();
        if (chargesDialog == null)
        {
            chargesDialog = new JDialog(ExtPayMain.uiFrame, "Biller Account Config");
            chargesDialog.setIconImage(ExtPayMain.uiFrame.getIconImage());

            chargesDialog.setContentPane(this);
            chargesDialog.pack();

            chargesDialog.setResizable(false);
            chargesDialog.setLocationRelativeTo(ExtPayMain.uiFrame);
            chargesDialog.setModal(true);
            chargesDialog.setVisible(true);
        }
        else
        {
            chargesDialog.setVisible(true);
        }
    }

    public void setBillerTree()
    {
        DefaultMutableTreeNode billerRootNode = ((DefaultMutableTreeNode) billerTree.getModel().getRoot());
        billerRootNode.removeAllChildren();

        for (Object[] currency : txutil.selectbillerAccount())
        {
            billerRootNode.add(new DefaultMutableTreeNode(currency[0] + "~" + currency[1]));
        }
        updateBillerTree();
        displayValue(BRController.PrimaryCurrency);
    }

    public void refreshBanksTree()
    {
        DefaultMutableTreeNode billerAcctNode = ((DefaultMutableTreeNode) billerTree.getModel().getRoot());
        DefaultMutableTreeNode newBillerAccount = new DefaultMutableTreeNode("Biller Account");

        billerAcctNode.removeAllChildren();
        billerAcctNode.add(newBillerAccount);

        Object[][] existingAccounts = txutil.selectbillerAccount();
        if (existingAccounts == null)
        {
            JOptionPane.showMessageDialog(this, "Error retrieving registered Records!", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            for (Object[] bank : existingAccounts)
            {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(bank[0] + " ~ " + bank[1]);
                billerAcctNode.add(node);
            }
        }
        billerTreeScroller.getHorizontalScrollBar().setValue(0);
        billerTreeScroller.getVerticalScrollBar().setValue(0);
        billerTree.updateUI();
    }

    public void updateBillerTree()
    {
        billerTreeScroller.getHorizontalScrollBar().setValue(0);
        billerTreeScroller.getVerticalScrollBar().setValue(0);
        billerTree.updateUI();
    }

    private void ACCT_NO_BILLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ACCT_NO_BILLMouseClicked


    }//GEN-LAST:event_ACCT_NO_BILLMouseClicked

    private void ACCT_NO_BILLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ACCT_NO_BILLKeyPressed

    }//GEN-LAST:event_ACCT_NO_BILLKeyPressed

    private void ACCT_NO_BILLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ACCT_NO_BILLKeyTyped

        saveButton.setEnabled(true);
    }//GEN-LAST:event_ACCT_NO_BILLKeyTyped

    private void ACCT_NAMEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ACCT_NAMEItemStateChanged

        if (ACCT_NAME.getSelectedIndex() != 0)
        {
            ACCT_NO_BILL.setText(txutil.getBillerAcct(ACCT_NAME.getSelectedItem().toString()));
            Object[][] billerAcct = txutil.selectTaxAcctFiltered(ACCT_NAME.getSelectedItem().toString().trim());
            for (Object[] record : billerAcct)
            {
                abbvr.setText(String.valueOf(record[0]));
                ACCT_NO_NAME.setText(String.valueOf(record[1]));
            }

        }
        else
        {
            ACCT_NO_BILL.setText("");
        }

    }//GEN-LAST:event_ACCT_NAMEItemStateChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        //Star Times, Canal Plus Startimes Suspense
        switch (saveButton.getText())
        {
            case "Update":
                if (ACCT_NAME.getSelectedItem().equals("Star Times"))
                {
                    AcctAbrv = "STT";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("Canal Plus")))
                {
                    AcctAbrv = "CAN";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("E-Tax Collection")))
                {
                    AcctAbrv = "ETC";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("Biller Suspense")))
                {
                    AcctAbrv = "BLS";
                }
                else
                {

                    Object[][] billerAcct = txutil.selectTaxAcctFiltered(ACCT_NAME.getSelectedItem().toString().trim());
                    for (Object[] record : billerAcct)
                    {
                        abbvr.setText(String.valueOf(record[0]));
                        ACCT_NO_NAME.setText(String.valueOf(record[1]));
                        AcctAbrv = String.valueOf(record[0]);
                        AcctName = String.valueOf(record[1]);
                    }                  
                }
                txutil.updateBillerActRecord(ACCT_NO_BILL.getText(), AcctName, AcctAbrv);
                clearFields();
                refreshBanksTree();
                break;
            case "Save":
                if (ACCT_NAME.getSelectedItem().equals("Star Times"))
                {
                    AcctAbrv = "STT";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("Canal Plus")))
                {
                    AcctAbrv = "CAN";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("E-Tax Collection")))
                {
                    AcctAbrv = "ETC";
                }
                else if ((ACCT_NAME.getSelectedItem().equals("Biller Suspense")))
                {
                    AcctAbrv = "BLS";
                }
                else
                {
                    Object[][] billerAcct = txutil.selectTaxAcctFiltered(ACCT_NAME.getSelectedItem().toString().trim());
                    for (Object[] record : billerAcct)
                    {
                        abbvr.setText(String.valueOf(record[0]));
                    }
                    AcctAbrv = abbvr.getText();
                }
                txutil.InsertBillerActRecord(ACCT_NO_BILL.getText(), String.valueOf(ACCT_NAME.getSelectedItem().toString()), AcctAbrv);
                clearFields();
                refreshBanksTree();
                break;
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    private void clearFields()
    {
        ACCT_NO_BILL.setText("");
        ACCT_NO_BILL.setText("");
        ACCT_NAME.setSelectedIndex(0);
        abbvr.setText("");
    }
    private void ACCT_NO_NAMEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ACCT_NO_NAMEMouseClicked

    }//GEN-LAST:event_ACCT_NO_NAMEMouseClicked

    private void ACCT_NO_NAMEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ACCT_NO_NAMEKeyPressed

    }//GEN-LAST:event_ACCT_NO_NAMEKeyPressed

    private void ACCT_NO_NAMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ACCT_NO_NAMEKeyTyped

    }//GEN-LAST:event_ACCT_NO_NAMEKeyTyped

    private void ACCT_NO_BILLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ACCT_NO_BILLFocusLost

//        if (!ACCT_NO_BILL.getText().isEmpty() || !ACCT_NO_BILL.getText().equals(""))
//        {
//            ACCT_NO_NAME.setText(txutil.queryBillerName(ACCT_NO_BILL.getText()));
//            ACCT_NO_NAME.requestFocusInWindow();
//            setAcctDisplayRec();
//        }
    }//GEN-LAST:event_ACCT_NO_BILLFocusLost

    private void billerTreeComponentRemoved(java.awt.event.ContainerEvent evt)//GEN-FIRST:event_billerTreeComponentRemoved
    {//GEN-HEADEREND:event_billerTreeComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_billerTreeComponentRemoved

    private void ACCT_NAMEPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_ACCT_NAMEPropertyChange
    {//GEN-HEADEREND:event_ACCT_NAMEPropertyChange
        // TODO add your handling code here:
        if (ACCT_NAME.getSelectedIndex() != 0)
        {
            ACCT_NO_BILL.setText(txutil.getBillerAcct(ACCT_NAME.getSelectedItem().toString()));
            Object[][] billerAcct = txutil.selectTaxAcctFiltered(ACCT_NAME.getSelectedItem().toString().trim());
            for (Object[] record : billerAcct)
            {
                abbvr.setText(String.valueOf(record[0]));
                ACCT_NO_NAME.setText(String.valueOf(record[1]));
            }

        }
        else
        {
            ACCT_NO_BILL.setText("");
        }

    }//GEN-LAST:event_ACCT_NAMEPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ACCT_NAME;
    private javax.swing.JTextField ACCT_NO_BILL;
    private javax.swing.JTextField ACCT_NO_NAME;
    private javax.swing.JTextField abbvr;
    private javax.swing.JTree billerTree;
    private javax.swing.JScrollPane billerTreeScroller;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
